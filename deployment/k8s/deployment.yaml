apiVersion: v1
kind: Namespace
metadata:
  name: kafka
  labels:
    name: kafka
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: zookeeper
  name: zookeeper-env-config
  namespace: kafka
data:
  ZOOKEEPER_CLIENT_PORT: "2181"
  ZOOKEEPER_TICK_TIME: "2000"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper
  name: zookeeper-svc
  namespace: kafka
spec:
  type: NodePort
  ports:
    - name: zookeeper-port
      port: 2181
      nodePort: 30001
      targetPort: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: zookeeper
  name: zookeeper
  namespace: kafka
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  serviceName: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:5.4.9
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2181
              name: zookeeper-port
          envFrom:
            - configMapRef:
                name: zookeeper-env-config
          volumeMounts:
            - mountPath: /var/lib/zookeeper/data
              name: zookeeper-data
            - mountPath: /var/lib/zookeeper/log
              name: zookeeper-log
      volumes:
        - hostPath:
            path: /shared/zookeeper/data
            type: DirectoryOrCreate
          name: zookeeper-data
        - hostPath:
            path: /shared/zookeeper/log
            type: DirectoryOrCreate
          name: zookeeper-log
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: kafka
  name: kafka-env-config
  namespace: kafka
data:
  KAFKA_ZOOKEEPER_CONNECT: "zookeeper-svc:2181"
  KAFKA_ADVERTISED_LISTENERS: "CLIENT://kafka-svc:9092,EXTERNAL://127.0.0.1:9093"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT"
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  KAFKA_INTER_BROKER_LISTENER_NAME: "CLIENT"
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka-svc
  namespace: kafka
spec:
  type: NodePort
  ports:
    - port: 9092
      nodePort: 30002
      targetPort: 9092
      name: internal
    - port: 9093
      nodePort: 30003
      targetPort: 9093
      name: external
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kafka
  name: kafka
  namespace: kafka
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  serviceName: kafka
  template:
    metadata:
      labels:
        app: kafka
        io.confluent.docker.testing: "true"
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:5.4.9
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
              name: internal
            - containerPort: 9093
              name: external
          envFrom:
            - configMapRef:
                name: kafka-env-config
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_LOG_DIRS
              value: /app/$(POD_NAME)/data
            - name: KAFKA_LOG_DIR
              value: /app/$(POD_NAME)/log
          volumeMounts:
            - mountPath: /app
              name: kafka-data
      volumes:
        - hostPath:
            path: /shared/kafka/
            type: DirectoryOrCreate
          name: kafka-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: akhq
  name: akhq
  namespace: kafka
spec:
  type: NodePort
  ports:
    - port: 8080
      nodePort: 30004
      targetPort: 8080
      name: http
  selector:
    app: akhq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: akhq
  name: akhq
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: akhq
  template:
    metadata:
      labels:
        app: akhq
    spec:
      containers:
        - name: akhq
          image: tchiotludo/akhq:0.21.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
            - name: config-volume
              mountPath: /app/application.yml
              subPath: application.yml
      volumes:
        - configMap:
            name: akhq-config
          name: config-volume
---
apiVersion: v1
data:
  application.yml: |-
    akhq:
      connections:
        docker-kafka-server:
          properties:
            bootstrap.servers: "kafka-svc:9092"
kind: ConfigMap
metadata:
  labels:
    app: akhq
  name: akhq-config
  namespace: kafka
